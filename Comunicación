#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>

int main(int argc, char *argv[]) {
    int rank, size, N;
    double local_sum = 0.0, total_sum = 0.0, promedio = 0.0;

    // Inicialización de MPI
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Proceso raíz solicita N y lo transmite
    if (rank == 0) {
        printf("Ingrese la cantidad de valores por proceso: ");
        fflush(stdout);
        scanf("%d", &N);
    }

    // Broadcast del tamaño N a todos los procesos
    MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Inicialización del generador de números aleatorios
    srand(time(NULL) + rank); // Semilla distinta por proceso

    // Cada proceso genera N valores y calcula suma local
    for (int i = 0; i < N; i++) {
        double valor = rand() % 100; // Número aleatorio entre 0 y 99
        local_sum += valor;
    }

    // Reducción: suma de todas las sumas locales en el proceso raíz
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // Proceso raíz calcula el promedio global
    if (rank == 0) {
        promedio = total_sum / (N * size);
    }

    // Broadcast del promedio a todos los procesos
    MPI_Bcast(&promedio, 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    // Cada proceso muestra su rank y el promedio recibido
    printf("Proceso %d: promedio global = %f\n", rank, promedio);

    // Finaliza MPI
    MPI_Finalize();
    return 0;
}
