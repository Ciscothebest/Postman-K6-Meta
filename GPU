#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <cuda_runtime.h>

#define N 1048576  // 1M elementos

// ---------------- GPU KERNEL ------------------
__global__ void add_vectors(float *A, float *B, float *C, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    float *A, *B, *C_cpu, *C_gpu;

    // Reservar memoria en CPU
    A = (float*)malloc(N * sizeof(float));
    B = (float*)malloc(N * sizeof(float));
    C_cpu = (float*)malloc(N * sizeof(float));
    C_gpu = (float*)malloc(N * sizeof(float));

    // Inicializar vectores
    for (int i = 0; i < N; i++) {
        A[i] = 1.0f;
        B[i] = 2.0f;
    }

    //----------------- CPU con OpenMP ----------------------
    double start_cpu = omp_get_wtime();

    #pragma omp parallel for
    for (int i = 0; i < N; i++) {
        C_cpu[i] = A[i] + B[i];
    }

    double end_cpu = omp_get_wtime();
    double cpu_time = end_cpu - start_cpu;

    printf("Tiempo CPU (OpenMP): %f segundos\n", cpu_time);

    //----------------- GPU con CUDA ------------------------

    float *d_A, *d_B, *d_C;

    cudaMalloc((void**)&d_A, N * sizeof(float));
    cudaMalloc((void**)&d_B, N * sizeof(float));
    cudaMalloc((void**)&d_C, N * sizeof(float));

    cudaEvent_t startEvent, stopEvent;
    cudaEventCreate(&startEvent);
    cudaEventCreate(&stopEvent);

    cudaEventRecord(startEvent, 0);

    cudaMemcpy(d_A, A, N * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, N * sizeof(float), cudaMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;

    add_vectors<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, N);

    cudaMemcpy(C_gpu, d_C, N * sizeof(float), cudaMemcpyDeviceToHost);

    cudaEventRecord(stopEvent, 0);
    cudaEventSynchronize(stopEvent);

    float gpu_time_ms = 0;
    cudaEventElapsedTime(&gpu_time_ms, startEvent, stopEvent);
    float gpu_time = gpu_time_ms / 1000.0f;  // convertir a segundos

    printf("Tiempo GPU (CUDA, incl. transferencias): %f segundos\n", gpu_time);

    //----------------- Verificar resultados ----------------
    int errors = 0;
    for (int i = 0; i < N; i++) {
        if (abs(C_cpu[i] - C_gpu[i]) > 1e-5) {
            errors++;
            break;
        }
    }

    if (errors)
        printf("Â¡Error: Los resultados no coinciden!\n");
    else
        printf("Resultado correcto: CPU y GPU coinciden.\n");

    //----------------- Speedup -----------------------------
    printf("Speedup = T_CPU / T_GPU = %f\n", cpu_time / gpu_time);

    //----------------- Liberar -----------------------------
    free(A); free(B); free(C_cpu); free(C_gpu);
    cudaFree(d_A); cudaFree(d_B); cudaFree(d_C);
    cudaEventDestroy(startEvent);
    cudaEventDestroy(stopEvent);

    return 0;
}
